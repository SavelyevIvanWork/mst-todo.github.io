{"version":3,"sources":["components/Todo/index.js","components/Column/TitleInput/index.js","components/Column/index.js","App.js","models/Todo.js","models/Column.js","models/RootStore.js","store.js","index.js"],"names":["Container","styled","div","props","isDragging","Title","h3","Content","p","Todo","observer","todo","title","content","Input","input","TitleInput","column","inputRef","useRef","useState","setTitle","useOutsideClick","closedTitleInput","ref","value","autoFocus","onChange","e","target","inputChangeHandler","onKeyDown","key","updateTitle","updateColumnTitleHandler","Column","checkedTitle","onClick","clickTitle","values","todos","map","id","isDraggingOver","App","store","useContext","StoreContext","columns","types","model","optional","string","uuidv4","checked","boolean","newTitle","actions","self","updateNewTitle","require","create","React","createContext","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.6683d182.chunk.js","sourcesContent":["import {observer} from \"mobx-react-lite\";\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  margin: 5px;\n  border: 1px solid lightgray;\n  border-color: ${props => (props.isDragging ? 'gray' : 'lightgray')};\n  border-radius: 5px;\n  background-color: ${props => (props.isDragging ? 'lightgray' : 'white')};\n`\n\nconst Title = styled.h3`\n  position: relative;\n  margin: 5px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 25px;\n    width: 100%;\n    height: 2px;\n    background-color: darkcyan;\n  }\n`;\n\nconst Content = styled.p`\n  display: block;\n  margin: 5px;\n  padding: 5px\n`;\n\nconst Todo = observer(({todo}) => {\n    return (\n        <Container>\n            <Title>{todo.title}</Title>\n            <Content>{todo.content}</Content>\n        </Container>\n    )\n})\n\nexport default Todo","import styled from 'styled-components'\nimport {useRef} from \"react\";\nimport useOutsideClick from \"@rooks/use-outside-click\";\nimport {observer} from \"mobx-react-lite\";\nimport {useState} from \"react\";\n\nconst Input = styled.input`\n  margin: 0;\n  padding: 10px;\n  border: none;\n  border-bottom: 1px solid lightgrey;\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n  outline: none;\n  font-size: 20px;\n  line-height: 16px;\n  font-weight: bold;\n`\n\nconst TitleInput = observer(({column}) => {\n\n    const inputRef = useRef()\n    const [title, setTitle] = useState(column.title)\n\n    function outsidePClick() {\n        column.closedTitleInput()\n    }\n\n    useOutsideClick(inputRef, outsidePClick);\n\n    const inputChangeHandler = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const updateColumnTitleHandler = (e) => {\n        if (e.key === 'Enter') {\n            column.updateTitle(title)\n        }\n    }\n\n    return (\n        <Input\n            ref={inputRef}\n            value={title}\n            autoFocus={true}\n            onChange={(e) => inputChangeHandler(e)}\n            onKeyDown={(e) => updateColumnTitleHandler(e)}\n        />\n    )\n})\n\nexport default TitleInput","import {observer} from \"mobx-react-lite\"\nimport styled from 'styled-components'\nimport Todo from \"../Todo\";\nimport {values} from \"mobx\";\nimport TitleInput from \"./TitleInput\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  max-height: 80vh;\n  margin: 10px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n  background-color: ${props => (props.isDragging ? 'gray' : 'white')};\n`\nconst Title = styled.h3`\n  font-size: 20px;\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid lightgrey;\n`\n\nconst Column = observer( ({column}) => {\n\n\n    return (\n        <Container>\n            {\n                column.checkedTitle\n                    ? <TitleInput column={column} ></TitleInput>\n                    : <Title onClick={() => column.clickTitle()}\n                    >{column.title}</Title>\n            }\n\n            {\n                values(column.todos).map(todo => {\n                    return <Todo key={todo.id} todo={todo}/>\n                })\n            }\n        </Container>\n    )\n})\n\nexport default Column\n","import './App.css'\nimport {observer} from \"mobx-react-lite\";\nimport {values} from \"mobx\";\nimport Column from \"./components/Column\";\nimport {useContext} from \"react\";\nimport {StoreContext} from \"./index\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  background-color: ${props => (props.isDraggingOver ? 'red' : 'white')};\n`\n\nconst App = observer(() => {\n    const store = useContext(StoreContext)\n    // console.log(store.columns.get('column-1'))\n    return (\n        <Container>\n        {\n            values(store.columns).map(column => {\n                return <Column key={column.id} column={column}/>\n            })\n        }\n       </Container>\n    )\n})\n\nexport default App\n","import {types} from \"mobx-state-tree\";\nimport {v4 as uuidv4} from 'uuid'\n\nconst Todo = types.model('Todo',{\n    id: types.optional(types.string, () => `todo-${uuidv4()}`),\n    title: types.optional(types.string, 'Untitled'),\n    content: types.optional(types.string, 'Todo content'),\n    checked: types.optional(types.boolean, false)\n})\n\nexport default Todo","import {types} from 'mobx-state-tree'\nimport {v4 as uuidv4} from 'uuid'\nimport Todo from \"./Todo\";\n\n\nconst Column = types.model('Column', {\n    id: types.optional(types.string, () => `column-${uuidv4()}`),\n    title: types.optional(types.string, 'Untitled'),\n    newTitle: types.optional(types.string, ''),\n    checkedTitle: types.optional(types.boolean, false),\n    todos: types.map(Todo)\n})\n    .actions(self => {\n        function clickTitle() {\n            self.checkedTitle = true\n            self.newTitle = self.title\n        }\n        function updateNewTitle(newTitle) {\n            self.newTitle = newTitle\n        }\n        function updateTitle(title) {\n            self.title = title\n            self.checkedTitle = false\n        }\n        function closedTitleInput() {\n            self.checkedTitle = false\n        }\n\n        return {clickTitle, updateNewTitle, updateTitle, closedTitleInput}\n    })\n\nexport default Column","import Column from \"./Column\";\nconst {types} = require(\"mobx-state-tree\");\n\nconst RootStore = types.model({\n        columns: types.map(Column)\n    })\n\nexport default RootStore\n","import RootStore from \"./models/RootStore\";\n\nconst store = RootStore.create({\n    columns: {\n        'column-1': {\n            todos: {\n                'todo-1': {\n                },\n                'todo-2': {\n                },\n                'todo-3': {\n                }\n            }\n        },\n        'column-2': {\n            todos: {\n                'todo-1': {\n                }\n            }\n        },\n        'column-3': {\n            todos: {\n                'todo-1': {\n                }\n            }\n        }\n    }\n});\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\n\nexport const StoreContext = React.createContext();\n\nReactDOM.render(\n  <React.StrictMode>\n      <StoreContext.Provider value={store}>\n        <App />\n      </StoreContext.Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}